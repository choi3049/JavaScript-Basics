//구조분해 할당
const obj = { a: 1, b: 2 };
const { a, b } = obj; // 다음 두 줄을 이렇게 한 줄로 표현 가능
const a = obj.a;
const b = obj.b;

//이벤트 버블링
 이벤트 버블링(event bubbling)이라는 개념을 알아야 합니다. 
 td의 부모 태그는 tr이고, tr의 부모 태그는 table입니다. 
 td 태그를 클릭하면 td 태그에서 click 이벤트가 발생합니다. 
 신기하게도 td 태그의 부모인 tr 태그에서도 동일한 이벤트가 발생하고, table 태그에서도 발생합니다. 
 즉, td 태그에서 발생한 click 이벤트가 table 태그까지 전달됩니다.

HTML에서는 이벤트가 발생할 때 부모 태그에도 순차적으로 동일한 이벤트가 발생합니다. 
이처럼 이벤트가 부모 태그로 퍼져 나가는 현상이 수면으로 올라가는 물방울 모양과 비슷하다고 
해서 이벤트 버블링이라는 이름이 붙었습니다.

td가 아닌 table의 이벤트를 실행하고 싶을 경우에는 event.currentTarget을 사용하면 된다.

//이젠트 캡쳐링
부모로부터 자식한테 이벤트 설정 ex)팝업창 닫을때(팝업창 이외의 부분을 클릭할 경우 팝업창 닫힘)
$table.addEventListener("click", callback, true);

//flat
flat 메서드는 배열의 차원을 낮추는 메서드로, n차원 배열을 n-1차원 배열로 낮춥니다. 
이차원 배열이라면 일차원 배열로 바뀝니다. 일차원 배열은 flat을 적용해도 그대로 일차원 배열로 남아 있습니다. 
차원을 낮추는 게 배열을 평평하게 만드는 것처럼 보여서 flat이라는 이름이 붙었습니다.

const array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
array.flat(); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
const array2 = [1, 2, 3, [[4, 5, 6], [7, 8, 9]]];
array2.flat(); // [1, 2, 3, [4, 5, 6], [7, 8, 9]]

//every
every 메서드는 반복문의 일종으로 요소를 순회하면서 조건 함수의 반환값이 모두 true이면 every 메서드도 true를 반환합니다. 
조건 함수의 반환값이 하나라도 false이면 every 메서드의 반환값도 false가 됩니다.

every 메서드는 일반 반복문보다 더 효율적입니다. 일반 반복문을 사용할 때는 직접 멈추지 않으면 끝까지 
탐색하지만, every는 조건에 만족하지 않는 요소를 하나라도 찾으면 바로 반복을 중단합니다. 

배열.every(조건함수);

반대로는 some메서드가있다 