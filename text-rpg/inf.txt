참조값은 변수가 객체의 주소를 가리키는 값이기 때문에 복사된 값(주소)이 같은 값을 가리킨다.

const a = {number: 1};
let b = a;

b.number = 2

console.log(a); // {number: 2}
console.log(b); // {number: 2}

// 얕은복사

const a = [];
const b = 'hello';
const c = {};

const arr = [a, b, c];
const arr1 = arr;  // 참조
arr1[1] = 'hi'  //배열에 b가 변경됨 

const arr2 = [...arr]  // 얕은복사
arr2[1] = 'babo';
arr[1] // 결과 값: hi  
    //얕은 복사를 실행하면 기존에 선언한 배열의 내용은 변하지않고, 배열 내용을 별도로 변경하며 사용가능.

arr[0].push(1)
arr[0] // 결과 값: [1]
    // 얕은 복사는 참조가 아닌값들은 복사가 되지만(문자열, 불리안 등),  참조가되어 있는 부분은 복사 불가능.


//깊은복사
const monster1 = JSON.parse(JSON.stringify(arr)); //모든 값 복사 가능.

//간단한 객체는 JSON.parse(JSON.stringify(객체))를 사용해도 크게 문제는 없습니다.
 다만, 성능도 느리고 함수나 Math, Date 같은 객체를 복사할 수 없다는 단점이 있습니다.
  따라서 실무에서는 lodash 같은 라이브러리(다른 사람이 미리 만들어 둔 코드)를 사용하곤 합니다.


//복사 예
const a = 'b'; 
const c = ['d', true, 1]; 
const e = { g: 'h' }; 
const i = [{ j: 'k' }, { l: 'm' }]; 
const n = { o: { p: 'q' }};

const a2 = a;
const c2 = c.slice();
const e2 = { ...e };
const i2 = JSON.parse(JSON.stringify(i));
const n2 = JSON.parse(JSON.stringify(n));




//this.란?

객체안에 있을떈 객체 안의 값임을 가리킴

화살표함수의 경우에 기본적으로 this는 window 객체를 가리킴

window 객체는 브라우저를 가리키는 객체로, 브라우저가 제공하는 기본 객체와 함수들은 대부분 
window 객체 안에 들어 있습니다. document나 console 객체도 실제로는 window.document, 
window.console입니다. window는 생략할 수 있어서 document와 console로만 적는 것이죠.